#!/usr/bin/env bash

set -e      # Exit immediately if any command fails
set -u      # Using undefined variables is an error. Exit immediately

# Settings
# --------

tests_dir="tests/VMTests/"
expected_passing="tests/short-list"
long_running="tests/long-running"
now_passing="tests/passing.lastrun"

# Utilities
# ---------

progress() { echo "== $@"; }
warning()  { echo -e "WARNING:" "$@"; }
die()      { echo -e "FATAL:" "$@"; exit 1; }

success()  { echo -e "\e[32m== success: $@\e[0m";
             echo "$@" >> "$now_passing"
           }
failure()  { echo -e "\e[31m== failure: $@\e[0m"; }

pretty_diff() {
    if type colordiff >/dev/null 2>&1; then
        colordiff -u "$@"
    else
        diff -u "$@"
    fi
}

check_for_tangle() {
    type pandoc-tangle >/dev/null 2>&1  || {
        have_tangle=false
        warning "pandoc-tangle not installed."  \
                "Ignoring changes in markdown files\n"
    }
}

lint_krun() {
    # Format, &gt; entity > and make each K task start on a new line
    xmllint -format - | sed -e 's/&gt;/>/g'  -e 's/~>/\n   ~>/g'
}

set_test_opts_for_proofs() {
    local basename="$(basename -s -spec.k "$1")"
    local basepath="$(dirname "$1")/$basename"
    test_opts=( -cMODE=NORMAL "$basepath.json" --prove "$basepath-spec.k" )
}

krun_with_opts() {
    local test_file=$1; shift
    local lint=lint_krun
    local test_opts=()
    export K_OPTS=-Xss500m
    export cSCHEDULE=${cSCHEDULE:-DEFAULT}
    case "$test_file" in
       *gas-analysis/*) test_opts=( -cMODE=VMTESTS    "$test_file" );;
       *VMTests/*     ) test_opts=( -cMODE=VMTESTS    "$test_file" );;
       *proofs/*      ) set_test_opts_for_proofs "$test_file"; lint=cat;;
       *              ) die "Don't know how to set test_opts for '$test_file'";;
    esac

    krun --directory .build/$K_VERSION/ --debug \
         -cSCHEDULE=$cSCHEDULE "${test_opts[@]}" "$@" \
        | $lint
}

# Test Filters and Lists
# ----------------------

filter_not_longrunning() { grep -Fvxf "$long_running" -; }

filter_short() {
    quick_list="$1"
    case "$quick_list" in
        1)  grep -e 'vmArithmeticTest/[a-dA-D]'                                                ;;
        2)  grep -e 'vmArithmeticTest/expPowerOf256Of256'                                      ;;
        3)  grep -e 'vmArithmeticTest/[eE]' | grep -v -e 'vmArithmeticTest/expPowerOf256Of256' ;;
        4)  grep -e 'vmArithmeticTest/[f-mF-M]'                                                ;;
        5)  grep -e 'vmArithmeticTest/[n-zN-Z]'                                                ;;
        6)  grep -e 'vmBitwiseLogicOperationTest'                                              ;;
        7)  grep -e 'vmBlockInfoTest' -e 'vmEnvironmentalInfoTest/[a-bA-B]'                    ;;
        8)  grep -e 'vmEnvironmentalInfoTest/[cC]'                                             ;;
        9)  grep -e 'vmEnvironmentalInfoTest/[d-zD-Z]' -e 'vmIOandFlowOperationsTest/[a-iA-B]' ;;
        10) grep -e 'vmIOandFlowOperationsTest/[C-I]'                                          ;;
        11) grep -e 'vmIOandFlowOperationsTest/[j]'                                            ;;
        12) grep -e 'vmIOandFlowOperationsTest/[J]'                                            ;;
        13) grep -e 'vmIOandFlowOperationsTest/[k-mK-M]'                                       ;;
        14) grep -e 'vmIOandFlowOperationsTest/[n-zN-Z]'                                       ;;
        15) grep -e 'vmLogTest/log[0-2]' -e 'vmLogTest/log_'                                   ;;
        16) grep -e 'vmLogTest/log[3-9]'                                                       ;;
        17) grep -e 'vmPerformanceTest' -e 'vmPushDupSwapTest/[a-oA-O]'                        ;;
        18) grep -e 'vmPushDupSwapTest/push[0-1]'                                              ;;
        19) grep -e 'vmPushDupSwapTest/[q-zQ-Z]' -e 'vmPushDupSwapTest/push[2-9]'              ;;
        20) grep -e 'vmSystemOperationsTest' -e 'vmSha3Test' -e 'vmtests'                      ;;
    esac | filter_not_longrunning
}

filter_tests() {
    local command=( exit 1 )
    case $# in
    0) cat;       return ;;
    1) grep "$1"; return ;;
    *) cat > /dev/null;
       warning "Too many expressions";
       ;;
    esac
}

list_gas_analysis() { find "tests/gas-analysis" -name '*.evm'; }
list_vmtests()      { find "$tests_dir"         -name '*.json'; }
list_proofs()       { find "proofs/"            -name '*-spec.k'; }
list_short() {
    if [[ "$#" -gt 0 ]]; then
        cat "$expected_passing" | filter_short "$1"
        return
    fi
    for i in $(seq 1 20); do
        cat "$expected_passing" | filter_short "$i"
    done | sort
    return
}

list_rv_jenkins() { ( list_vmtests; list_gas_analysis) \
                    | grep -v 'vmPerformance' | sort -R | head -n 8000; }
list_rv_jenkins() { list_tests | grep -v 'vmPerformance' | sort -R | head -n 8000; }
list_quicktests() { list_short | filter_not_longrunning | sort -R | head -n 20; }
list_tests()      { list_vmtests; list_gas_analysis; list_proofs; }


# Higher-order runner helpers
# ---------------------------

with_test_list() {
    local list=$1; shift
    local do_run=$1; shift;
    local count=0 failed=0 # TODO: Used by run_tests too; Find a cleaner way

    run_make all
    while read test_file; do
        $do_run "$test_file" </dev/null || true
    done < <($list | filter_tests "$@")
    exit $failed
}

with_first() {
    local list=$1; shift
    local do_run=$1; shift;

    [[ $($list | wc -l) = 1 ]] || {
        warning "Multiple tests passed, but only running the first"
    }
    $do_run $($list | head -n 1)
}

# Runners
# -------

test_with_uiuck() {
    local output_file="$default_output_file"
    if [[ -e $test_file.out ]]; then output_file=$test_file.out; fi
    ( # Running in a sub-shell to avoid export spilling over to other tests
        pretty_diff --label expected <(cat "$output_file") \
                    --label actual   <(krun_with_opts "$test_file")
    )
}

test_with_rvk() {
    (
        # TODO: Integrate this into Build nicely
        set +e;
        interpreter="$(dirname "$0")/.build/rvk/ethereum-kompiled/interpreter"
        kast="$(mktemp)"
        output="$(mktemp)"
        kast_output="$(mktemp)"
        trap "rm -rf $kast $output $kast_output" INT TERM EXIT
        "$(dirname "$0")/kast-json.py" "$1" > "$kast"
        $interpreter "$(dirname "$0")/.build/rvk/ethereum-kompiled/realdef.cma" -c PGM "$kast" textfile -c SCHEDULE '`DEFAULT_ETHEREUM`(.KList)' text -c MODE '`VMTESTS_ETHEREUM`(.KList)' text --output-file "$output"
        exit=$?
        if [ $exit -eq 0 ]; then
          exit 0
        fi
        k-bin-to-text "$output" "$kast_output"
        cat "$kast_output"
        printf "\n"
        exit $exit
    )
}

run_tests() {
    local test_file=$1 exit_status=0
    progress "running: $test_file"
    "test_with_$K_VERSION" "$@" || exit_status=$?
    count=$(($count + 1))
    if [[ $exit_status -eq 0 ]]; then
        success "$test_file"
    else
        failure "$test_file"
        failed=$(($failed + 1))
    fi
    progress "failed: $failed / $count"
    return $exit_status
}

run_krun() {
    progress "running: $1"
    ( krun_with_opts "$1" | lint_krun)
}

run_debug() {
    progress "debugging: $1"
    ( krun_with_opts "$1" --debugger )
}

run_make() {
    local make_opts=
    $have_tangle || make_opts="--assume-old ethereum.md --assume-old evm.md \
                               --assume-old data.md --assume-old krypto.md"
    make K_VERSION=${K_VERSION} -s $make_opts $@
}

# Main
# ----

cd "$(dirname $0)"

if krun --version | grep 'RV' >/dev/null 2>&1; then
    K_VERSION=rvk
else
    K_VERSION=uiuck
fi
progress "Using $K_VERSION"

default_output_file="tests/templates/output-$K_VERSION.txt"
have_tangle=true; check_for_tangle

[[ "$#" == '0' ]] && set all
run_command="$1" && shift
case "$run_command" in

    # Building
    all)           run_make all ;;
    defn)          run_make defn ;;

    # Running
    krun)          with_test_list list_tests run_krun     "$@" ;;
    debug)         with_first     list_tests run_debug    "$@" ;;
    analyze-gas)   with_test_list list_analysis run_krun  "$@" ;;
    analyze-debug) with_first     list_analysis run_debug "$@" ;;
    analyze-test)  with_test_list list_analysis run_tests "$@" ;;

    # Test lists
    list-tests)      with_test_list list_tests      echo "$@" ;;
    list-rv-jenkins) with_test_list list_rv_jenkins echo "$@" ;;
    list-short)      with_test_list "list_short $@" echo      ;;
    list-analysis)   with_test_list list_analysis   echo "$@" ;;

    # Test runs
    test)       with_test_list list_tests      run_tests "$@" ;;
    rv-jenkins) with_test_list list_rv_jenkins run_tests "$@" ;;
    short)      with_test_list "list_short $@" run_tests      ;;
    quicktest)  with_test_list list_quicktests run_tests "$@" ;;

    *)             echo "
    usage:
       $0                       Build the definitions and kompile them

       $0 defn                  Only detangle the definitions

       $0 krun                  Run a single program from the tests
       $0 debug                 Debug a single program from the tests
       $0 analyze-gas           Analyze a single program from the analysis directory
       $0 analyze-debug         Debug a single program from the analysis directory
       $0 analyze-test          Run a list of tests from the analysis list

       $0 list-tests <regx>     List passing and failing tests
       $0 list-rv-jenkins       List 8000 random tests (excluding performance tests)
       $0 list-short [N]        List the Nth short testsuite (ommitting N lists all)
       $0 list-analysis <regx>  List the analysis tests

       $0 test <regx>           Run passing and unknown tests
       $0 rv-jenkins            Run 8000 random tests (excluding performance tests)
       $0 short [N]             Run the Nth short testsuite (ommitting N runs all)
       $0 quicktest             Run 20 random passing tests
"; exit ;;
esac
